<--------------------------install express-generator and npm module----------------------->

npm install -g npm 
npx express-generatorÂ --hbs
npm init
npm i 
<!---------------->





<!-----------image-display--------->

app.use(express.static('public'));

<img src="/images/image.jpg">

<!---->

<--------------------array value------------------------->
in <---js-->

router.get('/', function(req, res, next) {
  const values=["binshul","binshulvilla","trader"]
  res.render('about',{values});
});

<!--hbs-->

<h3>welcome to out</h3>

{{#each values}}
<h4>{{this}}</h4>       <!---this curentitem--->
 {{/each}}

<---->


<!--another_one---->
<h3>welcome to out</h3>
{{#each values}}
<h4>{{@index}}-{{this}}</h4>       <!--this curentitem-->
 {{/each}}

{{@index}} used for se array locations

ouput:welcome to out
0-binshul
1-binshulvilla
2-trader

<!------display--3-->
index.js

router.get('/', function(req, res, next) {
 const user={name:'binshul',address:'villa',gender:'male'}
  res.render('index',{user});  
});

index.hbs
<li>name:{{user.name}}</li>
<li>address:{{user.address}}</li>
<li>gender:{{user.gender}}</li>

output:
     name:binshul
    address:villa
    gender:male

<!--------------------ADD 5 data------>
const five=[{name:'binshul',address:'villa',    gender:'male'},
              {name:'rahul',  address:'rahulvilla',gender:'male'},
              {name:'adi',    address:'adivilla',  gender:'male'},
              {name:'robert', address:'robvilla',  gender:'male'},
              {name:'parag',  address:'paragvilla',gender:'male'}]

              res.render('about',{five});                                                                                    //only one render add

});
<---------------------display_in_table_format-------------------->
<!---hbs--->

<table border="2">
     <tr>
    <th>name</th>
    <th>address</th>
    <th>gender</th>
  </tr>
  {{#each five}}
<tr>

    <td>{{this.name}}</td>
    <td>{{this.address}}</td>
    <td>{{this.gender}}</td>
  </tr>
  {{/each}}
  </table>

<!---js--->

router.get('/', function(req, res, next) {
  const five=[{ name:'binshul',address:'villa',gender:'male'},
             {name:'rahul',address:'rahul villa',gender:'male'},
             {name:'rahul2',address:'2rahul villa',gender:'male'},
             {name:'rahul3',address:'3rahul villa',gender:'male'},
             {name:'rahul4',address:'4rahul villa',gender:'male'}]

  res.render('index',{five});  
});

output:

name	address	gender
binshul	villa	male
rahul	rahul villa	male
rahul2	2rahul villa	male
rahul3	3rahul villa	male
rahul4	4rahul villa	male


(each give inside the call athoer way get more heading )


<!---------------displaytwo--------------------->


const person={name:"binshul",comments:{comment:' water is a liquid',date:'01:8:23'}}
   res.render('about',{user,values,five,person});   

<----->
<h3>{{person.name}}</h3>
<h3>{{person.comments.comment}}</h3>
<!------------------------------------------->


<!-------------------welcome----this_is_admin--------------------->

 const welcome={ name:"binshul",admin:true}
   res.render('about',{user,values,five,person,welcome});


{{#if welcome.admin}}
<h1>this is admin</h1>
{{else}}
<h1>this is normal user</h1>
{{/if}}

output:this is admin

(if true in js put false it show =this is not normal user)

(example below====)

<!--------------------register if home page diaplay no then registration page home  name contact email password----->
 
 {{#if login.admin}}

<div class="row">
<div class="col-4">
    <div class="card">
        <img src="images\0x0.webp" alt="" class="card-img-top">
        <div class="body">
            <h3> for sale</h3>
            <h4 class="text-center">Granny market</h4>
        </div>
    </div>
</div>
<div class="col-4">
    <div class="card">
        <img src="images\hevy6dvk7gien0rmg37n.webp" alt="" class="card-img-top">
        <div class="body">
            <h3> for sale</h3>
            <h4 class="text-center">Granny market</h4>
        </div>
    </div>
</div>
<div class="col-4">
    <div class="card">
        <img src="images\download.jpeg" alt="" class="card-img-top">
        <div class="body">
            <h3> for sale</h3>
            <h4 class="text-center">Granny market</h4>
        </div>
    </div>
</div>
</div> <br>

{{else}}
 <div class="container w-50"><br>
<form action="" method="post" class="form-control">
<input type="text" class="form-control" name="name" placeholder="name"><br>
<input type="text" class="form-control" name="contact" placeholder="contact"><br>
<input type="email" class="form-control" name="email" placeholder="email"> <br>
<input type="password" class="form-control" name="email" placeholder="passwod"> <br>
<input class="btn btn-danger" type="submit">
</div>
</form>
{{/if}}

<!--about.js il chaytu--->

const login={name:"dhanshul",admin:false}
   res.render('login2',{user,values,five,person,welcome,login});  

<!--------------------------------------------------------------------------------Array--close------------------------------------------------------->


<!-------------------------------------------------------------database connext---------------------------------------------------------------------->


(npm install mysql
outside the frame install.js / then create in datbase new file manually)

    var mysql = require('mysql');
    var con = mysql.createConnection({
      host: "127.0.0.1",
      user: "root",
      password: "",
      database:"express"
    });
    con.connect(function(err){
      if (err) throw err;
      console.log("Connected!");
    });


<!----------------->
(1) frist user page create login  add action also 

    userlogin.hbs

<div class="container w-50">
 <form  method="post" class="form-control" action="/action">
    <input type="text" name="productcategory" placeholder="productcategory" class="form-control"> <br>
    <input type="text" name="productname" placeholder="productname" class="form-control"> <br>
    <input type="text" name="productamount" placeholder="productamount" class="form-control"> <br>
    <textarea name="productdetails" placeholder="productdetails" class="form-control" ></textarea> <br>
    <input type="submit" class="btn btn-danger">
 </form>
</div>

(2)js connect 

       inedx.js

router.get('/userlogin', function(req, res, next) {
  res.render('userlogin');
});

//////action in app.js//////

app.use('/action', indexRouter);

(3)data base create manually and new file db.js and connect insert tables /install npm mysql

<-----------just for information--------------->

database addin db

module.exports=connection;

var db=require('../db'); add in js 

then add in action html 
parser call in app bodyparser install

<-------------------------->

(4) new page database connect

db.js

var mysql = require('mysql');
var con = mysql.createConnection({
  host: "127.0.0.1",
  user: "root",
  password: "",
  database:"study"
});
con.connect(function(err){
  if (err) throw err;
  console.log("Connected!");
});
module.exports=con


(5)in the top of the js 

 ar db=require('../db'); add in js 

6) parser install and call in app,js  then  assign action in hbs page
    
var bodyParser = require('body-parser');

app.use(bodyParser());

////then  assign action in hbs page/////

   index.js

router.post('/action',function(req,res)
{
  var productcategory=req.body.productcategory
  var productname=req.body.productname
  var productamount=req.body.productamount
  var productdetails=req.body.productdetails
  var sql=`insert into userlogin(productcategory,productname,	productamount,productdetails) values("${productcategory}","${productname}","${	productamount}","${productdetails}")`;
db.query(sql,function(err,result){
  if(err) throw err;
  res.redirect('/userlogin');
})

})



(7) then show output insert

(8) then add new hbs page for view in page db details

    userview.hbs

<div class="container-fluid w-50">
    <table border="1" class="mt-3" >
        <tr>
            <th>productcategory</th>
            <th>productname</th>
            <th>productamount</th>
            <th>productdetails</th>
        </tr>
        {{#each data}}
        <tr>
            <td>{{this.productcategory}}</td>
            <td>{{this.productname}}</td>
            <td>{{this.productamount}}</td>
            <td>{{this.productdetails}}</td>
           <td><a href="edit"class="btn btn-success">edit</a></td> 
           <td><a href="delete"class="btn btn-danger">delete</a></td> 
        </tr>
            {{/each}}
    </table>

</div>

(9) to selet from database and and show it in userpage

     index.js

router.get('/userview', function(req, res, next) {
  var sql='select * from userlogin';
  db.query(sql,function(err,rows,fields){
    if (err) throw err;
  res.render('userview',{data:rows});
});
});




<!-----------------------------------------------------------------user viewing db_table to page------------------------------------->
///////userview///

router.get('/userpro', function(req, res, next) { 
  var sql='select * from product';
  db.query(sql,function(err,rows,fields){
  if (err) throw err;
  res.render('userpro',{data:rows})
})
});


<------hbs----->

<div class="container-fluid"  >
<table border="1" class="mt-3">
     <tr>
    <th>product_category</th>
    <th>product_name</th>
    <th>product_amount</th>
    <th>product_details</th>
  </tr>
   {{#each data}}
<tr>
    <td>{{this.product_category}}</td>
    <td>{{this.product_name}}</td>
    <td>{{this.product_amount}}</td>
    <td>{{this.product_details}}</td>
     <td><a class="btn btn-success" href="edit"> edit</a></td>
    <td><a  class="btn btn-danger" href="delete">delete</a></td>
  </tr>
  {{/each}}
  </table>
  </div>

( userpro is page / select * from (database name )/ render(samepage))


<!----------------------------------------------------------------------DELETE---------------------------------------------------------------------->

hbs

<a href="/delete/{{this.id}}">Delete</a>

js

router.get('/delete/:id', function(req,res){
  var id = req.params.id;
  var sql = `delete from products where id = ${id}`;
  db.query(sql, function(err, result){
    if(err) throw err;
    res.redirect('/products');
  })
})

 (////deletename can change in router change the names ////where id is id must be in database id name ////////banalce id are id ///)



<!----------------------------------------------------------------------DELETE---------------------------------------------------------------------->

<!---------------------------------------------------------------------EDIT------------------------------------------------------------------------>
edit create new hbs and edit form call in js and app.js




js(call id also //by adding var to code we can display the old details in edit page)

router.get('/editproduct/:id', function(req, res, next) {
  var id=req.params.id;
  var sql=`select * from product where nid=${id};`
  db.query
  (sql,function(err,result){
    if (err) throw err;
    res.render("editproduct", { data: result}) 
  })
})

(//editproductis new href given to edit switch/// nid is datbase id

hbs

<div class="container w-50"> <br>
<h1 class="text-center">PRODUCT EDIT</h1>

<form method="post" class="form-control" >
    {{#each data}}
    <input type="text"class="form-control" name="productcategory" placeholder="productcategory" value="{{this.product_category}}"><br>
   
    <input type="text" name="productname" placeholder="productname" class="form-control" value="{{this.product_name }}"> <br>
    <input type="text" name="productamount" placeholder="productamount" class="form-control" value="{{this.product_amount }}"><br>
    <textarea  name="productdetails" placeholder="productdetails" class="form-control" >{{this.product_details}}</textarea>
    <input type="submit" class="btn btn-danger">


  {{/each}}
</form>
</div>

<!-----addinginformfor----update----->

hbs

<div class="container w-50"> <br>
<h1 class="text-center">PRODUCT EDIT</h1>

{{#each data}}
<form method="post" class="form-control" action="/edit1/{{this.nid}}">
    <input type="text"class="form-control" name="productcategory" placeholder="productcategory" value="{{this.product_category}}"><br>
   
    <input type="text" name="productname" placeholder="productname" class="form-control" value="{{this.product_name }}"> <br>
    <input type="text" name="productamount" placeholder="productamount" class="form-control" value="{{this.product_amount }}"><br>
    <textarea  name="productdetails" placeholder="productdetails" class="form-control" >{{this.product_details}}</textarea>
    <input type="submit" class="btn btn-danger">


  {{/each}}
</form>
</div>

(////each in hbs paste above form because they need to call that id

js

router.post('/edit1/:nid',function(req, res){
  var nid= req.params.nid
  var productcategory=req.body.productcategory
  var productname=req.body.productname
  var productamount=req.body.productamount
  var productdetails=req.body.productdetails

  var query=`update product set product_category='${productcategory}',product_name='${productname}',product_amount='${productamount}',product_details='${productdetails}'where nid=${nid}`;
  db.query(query,function (err,result){
    if (err) throw err;
  res.redirect('/userpro');
  });
});


<!-------fogender and address in update ----->


//customhelper.js  (//newcreate//)
const Handlebars = require("hbs");
Handlebars.registerHelper("eq", (a, b) => a == b);

//app.js
const customHelpers = require("./customehelper");  

or
require("./customhelper");(//in top//)

//edit.hbs
{{#if (eq this.gender "Male")}}checked{{/if}} 
(//forgender//)

js

<option value="{{this.district}}">{{this.district}}</option>
(//below the select tag//)



<!---------------------------------------------------------------------------------------------------------------------------->

login page  email  password  ,login button  
 js get 




<!-------------------------------------------------------------------Authentication------------------LOGIN-----LOGOUT----------------------------------------------------------------->

<!----Login---->

npm install express-session

Get secret key for session (security)


const crypto = require('crypto');
const secretKey = crypto.randomBytes(64).toString('hex');
console.log('Generated secret key:', secretKey);

(////these key paste outside  create a the folder and call as js and run in cmd the (nodefilename)///get a code paste in secret)//
<*** paste this above***)

app.js
const session = require('express-session');

// Set up session
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true
}));

hbs
<h1>Login</h1>
<form method="POST" action="/login">
    <label for="username">Username:</label>
    <input type="text" name="username" id="username" required><br>
    <label for="password">Password:</label>
    <input type="password" name="password" id="password" required><br>
    <input type="submit" value="Login">
</form>

js
app.post('/login', (req, res) => {
    var username = req.body.username;
    var password = req.body.password;
    // Query the database
    var query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
    connection.query(query, (error, results) => {
        if (error) {
            console.error(error);
            return res.redirect('/login');
        }

        if (results.length > 0) {
            req.session.user = username;
            return res.redirect('/');
        } else {
            return res.redirect('/login');
        }
    });
});

(///app.post or router.post/////// \login inline above is html actions))

<!----------------------------------Logout------------->

app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.log(err);
        }
        res.redirect('/login');
    });
});


(////logout give is give he button href logout ))


(///app.get or router.get))

<!-----------------------------------------------------------------------end of express and mysql---------------------------------------------------------------------------------> 

 STUDENT PAGE WELCOME  ADMISSION NUMBER  

   STUDENTS  DETAILS EDIT CHAYAN 

<!---------------------------------------------------------------------studentpage create they student can edit and delete thier profile-------------------------->


new stident homepage + student detailsshoe+ editbutton +show+

index.js

 router.get('/studentpage', function(req, res, next) {
  var email=req.session.user;
  var sql=`select * from express2 where email='${email}'`
  db.query(sql,function(err,rows,result){
    if(err) throw err;
 res.render('studentpage',{data:rows});
});

  })

studentpage.bbs


 <table class="table table-bordered mt-3">
     <tr>
    <th style="background-color: aqua;" >admission_no</th>
    <th style="background-color: aqua;" >fullname</th>
    <th style="background-color: aqua;">address</th>
    <th style="background-color: aqua;">gender</th>
    <th style="background-color: aqua;">birthdate</th>
    <th style="background-color: aqua;">cource</th>
    <th style="background-color: aqua;">contact</th>
    <th style="background-color: aqua;">parentcontact</th>
    <th style="background-color: aqua;">email</th>
    <th style="background-color: aqua;">password</th>
    <th style="background-color: aqua;">joindate</th>
    <th style="background-color: rgb(255, 217, 0);">update</th>
  </tr>
   {{#each data}}
<tr>
    <td>{{this.admission_no}}</td>
    <td>{{this.fullname}}</td>
    <td>{{this.address}}</td>
    <td>{{this.gender}}</td>
    <td>{{this.birthdate}}</td>
    <td>{{this.cource}}</td>
    <td>{{this.contact}}</td>
    <td>{{this.parentcontact}}</td>
    <td>{{this.email}}</td>
    <td>{{this.password}}</td>
    <td>{{this.joindate}}</td>
    <td>
    <a class="btn btn-success"  href="/edit/{{this.eid}}"> edit</a>
    <a  class="btn btn-danger" href="/delete/{{this.eid}}">delete</a>
    </td>
  </tr>
  {{/each}}
  </table>

(///same code we diaplay in viewing registered students table///)


<!------------------------------------if student login they show a welcomme to (thiet admission no /or any)display 

js
 router.get('/studentindex', function(req, res, next) {
 var email= req.session.user
  var sql=`select * from express2 where email='${email}'`
  db.query(sql,function(err,rows){
    if(err) throw err;
  res.render ('studentindex',{data1:rows});
  });
});


hbs

{{#each data1}}
<h4> welcome to {{this.email}}</h4>
 {{/each}}

<!---------------------------------------------------------------------------PROJECT--------------------------------------------------------------------------------------------->

Library Management System

A college library management is a project that manages and stores books information electronically according to students needs. 
The system helps both students and library manager to keep a constant track of all the books available in the library. 
It allows both the admin and the student to search for the desired book. This task if carried out manually will be tedious and includes chances of mistakes. 
These errors are avoided by allowing the system to keep track of information such as issue date, last date to return the book and thus there is no need to keep manual track of this information
which thereby avoids chances of mistakes. Thus this system reduces manual work to a great extent allows smooth flow of library activities by removing chances of errors in the details.

Modules:

1. Admin login: Admin is the one who administers the system by adding or removing e-books into and from the system respectively.
2. User login: Students have to register themselves into the system to create an account. After registering successfully, they can then login into the system by entering 10 digit mobile number and their email id
3. Add and Update Books: The admin can add books to the system by entering the details of the books and can even update the details.
4. Search option: Admin and Students can even search for books by entering the name of the book.
5. View Order-The admin can view order for the books.
6. Place order- The students can place order for the books and simultaneously the quantity of the book ordered will be decremented.


libraray login home page  //boog add chayan page ////book form value store///edit delete///


student register form///studentlogin//booksearch///book order///quantity//librarey view and confirm///


<!------------------------------------------------------------>

////login/with user admin//

router.post('/login1',(req,res)=>{
  var email=req.body.email
  var password=req.body.password
   var query =`SELECT * FROM library WHERE email='${email}' AND password ='${password}'`
   db.query(query,(error,result)=>{
    if(error){
      console.error(error);
      return res.redirect('/userlog')
    }
     if(result.length >0){
      req.session.user=email;

      if(result[0]['usertype']=='1'){
      return res.redirect('/userhome')

     }else if(result[0]['usertype']=='0'){
      return res.redirect('/adminregister')
     }else{
      return res.redirect('/register')
     }
    }
   });
});


(crete a another table enum in user register table and type 0 or 1 as per / )


// ////search box search  data///

router.post('/search',function(req,res,next){
  var search=req.body.search
  // console.log(search)
  var sql=`select *  from adminreg WHERE author="${search}" `;
  db.query(sql,function(err,row,fields){
    if (err) throw err;
    //  console.log(row)
  res.render('userproduct',{data7:row})
})
  })

(here give search author so author in table show)

hbs

<form action="/search" method="post">
        <input type="text" id="searchInput" placeholder="Enter your search" name="search">
        <input type="submit">Search</input>
         </form>




//product user view in other page inside poster by admin user can buy ////

 router.get('/userproduct', function(req, res, next) {
  var sql='select * from adminreg';
  db.query(sql,function(err,rows,fields){
    if (err) throw err;
  res.render('userproduct',{data7:rows});
});
});

hbs   (new hbs page to display admin posted user can view )

<table border="1" class="mt-3">
        <tr>
            <th>author</th>
            <th>bookname</th>
            <th>price</th>
            <th>publishdate</th>
            <th>quantity</th>
            <th>review</th>
        </tr>
        {{#each data7}}
        <tr>
            <td>{{this.author}}</td>
            <td>{{this.bookname}}</td>
            <td>{{this.price}}</td>
            <td>{{this.publishdate}}</td>
            <td>{{this.quantity}}</td>
            <td>
           <a href="/buy3/{{this.nid}}" class="btn btn-success">BUY</a>
           
           </td>
        </tr>
            {{/each}}
    </table>

</section>


 /////user click buy/ data goes to database show  ///////if we do this only admin can see who order it ////
create a new data base eg:userbuy table any id , authorid,author etc...

js

/////userbuy/database show///////
router.get('/buy3/:nid', function(req, res, next) {
  var nid=req.params.nid;
   var author=req.session.user;
    var sql=`insert into userbuy (author,authorid) values("${author}","${nid}");`

    db.query (sql,function(err,result){
    if (err) throw err;
    res.redirect("/userproduct") 
  })
})

(buy 3 is buy link give id)

hbs
<a href="/buy3/{{this.nid}}" class="btn btn-success">BUY</a>



/////userbuy admin see///////
js

router.get('/userbuy', function(req, res, next) {
  var sql='select * from userbuy';
  db.query(sql,function(err,rows,fields){
    if (err) throw err;
  res.render('userbuy',{data9:rows});
});
});


////////////user buy product user see/////


hbs (user buy view)

<h1 class="text-center">userbuyview</h1>
<div class="container-fluid ">
    <table border="1" class="mt-3">
        <tr>
             <th>name</th>

             <th>author</th>
             <th>bookname</th>
             <th>price</th>
        </tr>
        {{#each data9}}
        <tr>
            <td>{{this.name}}</td>
            <td>{{this.author}}</td>
            <td>{{this.bookname}}</td>
            <td>{{this.price}}</td>
        </tr>
            {{/each}}
    </table>

</div>


js

user buy product user see

router.get('/userbuyview', function(req, res,next){
  var email=req.session.user
  var sql=`SELECT * from userbuy INNER JOIN adminreg  ON  userbuy.authorid=adminreg.nid   INNER JOIN  library on  userbuy.author=library.email  WHERE library.email="${email}"`;
 
  // where userbuy.author="${email}"

  db.query(sql,function(err,row,result){
 console.log(email)

 if (err) throw err;
  res.render('userbuyview',{data9:row});
});
});


(select * from userbuy means user plays buy order and display in a database is userbuy 

admineg on meand  admin post book details database

userbuy.authorid=adminreg.nid means userbuy is databse ___authorid id userbuytablefield___adminregis table display registered product by admin __nid is its primarykey id


INNER JOIN  library on  userbuy.author=library.email --means--- library is a table fiels were user adin login are placed___userbuy is field userclick buy details show in this field table__author us an another field in both registration database and buy show admin database __library.email= is library is field they store userid password email 

 WHERE library.email="${email}"`  = __where library is a login email password name nuber etc  fields there )




<!-----------------------------------------------------------------------------BALANCE--COPY----------------------------------------------------------------------------------->


/////userbuy/database show///////

# (inserted this quary in  buy chayuna buy button quaryin inside) insert balance copy things already insert is thier just added update quary and sql1)
# add aa new field in registration database balance copy 
#buy3= name href link in buy button 
#nid = book  registration table id

router.get('/buy3/:nid/:balancecopy', function(req, res, next) {
  var nid=req.params.nid;
   var author=req.session.user;

   var balancecopy=req.params.balancecopy;
  //  var balancecopy=req.params.balancecopy;
  var balancecopy1 = balancecopy - 1;

    var sql=`insert into userbuy (author,authorid) values("${author}","${nid}");`
    var sql1=`update adminreg set balancecopy="${balancecopy1}" where nid="${nid}"`

    db.query (sql,function(err,result){
    if (err) throw err;
    console.log()

    db.query(sql1,function(err1,result){
    res.redirect("/userproduct") 
    })
  })
})

hbs

 <a href="/buy3/{{this.nid}}/{{this.balancecopy}}" class="btn btn-success">BUY</a>


********************THEN*******************

#ADDTHE BALANCE COPY IN BOOK REGISTRATION QUARY ALSO  ALLED LIN THIS 
# THEN IN VALUES WE DONOT ADD BALANCE COPY JUST ADD THE SAME QUANTITY BECAUSE THE BLANCE COPY NEED TO SAME LINK QUANTITY ADDED
**INSERTED IN OLD REGISTRATIONN BOOK PAGE ***

router.post('/action1',function(req,res)
{
  var author=req.body.author
  var bookname=req.body.bookname
  var price=req.body.price
  var publishdate=req.body.publishdate
  var quantity=req.body.quantity
  var sql=`insert into adminreg (author,bookname,	price,publishdate,quantity,balancecopy) values("${author}","${bookname}","${	price}","${publishdate}","${quantity}","${quantity}")`;
  db.query(sql,function(err,result){
    if(err) throw err;
    res.redirect('/adminregister');
  })
  })



<!----==================================-----RETURN THE ORDER USERBUYED __THEN THE PRODUCT QUANTITY ALSO NEED TO INCREASE BACK -------------------------------------------->


///return///buy using after balancecopy done sucessfully///

# return1 =href link name 
# do it seperatly 
# kid = userproductuy databse id is kid 
# nid = admin product register book page id 
# balance copy id field name 
# parse Int +1 after return delete , quantity increase 1 


router.get('/return1/:kid/:balancecopy/:nid',function(req,res){
  var nid=req.params.nid;
  var balancecopy=req.params.balancecopy;
  var kid=req.params.kid;
  var balance=req.params.balancecopy;



  var balancecopy = parseInt(balance) + 1;
  var sql=`update adminreg set balancecopy="${balancecopy}" where nid="${nid}"`;
  var sql1=`delete from userbuy where kid= ${kid}`;


  db.query(sql,function(err,result){
    if(err) throw err;
    db.query(sql1,function(err,result){
      if(err) throw err
      res.redirect('/userbuyview');
    })
    
  })
})


HBS

   <td> <a href="/return1/{{this.kid}}/{{this.balancecopy}}/{{this.nid}}" class="btn btn-success">Return</a></td>


<!--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
